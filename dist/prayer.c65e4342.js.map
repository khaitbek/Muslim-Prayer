{"mappings":"AACA,MAAMA,EAAmBC,SAASC,cAAc,oBAC1CC,EAAsBF,SAASC,cAAc,mBAAmBE,QAChEC,EAAeJ,SAASC,cAAc,eACtCI,EAAeL,SAASC,cAAc,eACtCK,EAAaN,SAASO,iBAAiB,UACvCC,EAAS,CACX,EAAG,SACH,EAAG,SACH,EAAG,OACH,EAAG,QACH,EAAG,MACH,EAAG,OACH,EAAG,OACH,EAAG,SACH,EAAG,UACH,GAAI,SACJ,GAAI,SACJ,GAAI,UA2BRC,eAAeC,EAAeC,EAAQC,GAClC,MAAMC,QANVJ,eAA2BK,EAAIC,EAAS,IACpC,MAAMC,EAAsBC,OAAOC,QAAQH,GAAQI,KAAIC,GAAS,GAAGA,EAAM,MAAMA,EAAM,OAAMC,KAAK,KAChG,OAAOC,MAAM,GAAGR,KAAOE,I,CAIOO,CAAY,2BAA2BX,IAAS,CAC1ED,OAAQA,EACRa,OAAO,IAAIC,MAAOC,WAAa,IAE7BC,QAA0Bd,EAAgBe,OAChD,OAAIC,MAAMC,QAAQH,GACPI,EAAkBJ,EAAmB5B,IAEhDgC,EAAkB,CAACJ,GAAoB5B,GAChC4B,E,CA0BX,SAASI,EAAkBC,EAAaC,GACpC,MAAMC,EAAiB,IAAIC,iBAC3BF,EAAWG,UAAY,GACvBJ,EAAYK,SAAQC,IAChB,MAAM3B,OAAEA,EAAM4B,KAAEA,EAAIC,MAAEA,EAAKC,QAAEA,GAAYH,EACnCI,EA5Bd,SAAiBH,GACb,IAAII,EAAYJ,EACZI,EAAUC,SAAS,SACnBD,EAAYA,EAAUE,MAAM,KAAK,IAEjCF,EAAUC,SAAS,OACnBD,EAAYA,EAAUE,MAAM,KAAK,IAGjCF,EADAA,EAAUC,SAAS,KACPD,EAAUE,MAAM,KAEhBF,EAAUE,MAAM,KAEhC,MAAOC,EAAMtB,EAAOuB,GAAO,CAACJ,EAAU,GAAIK,OAAOL,EAAU,IAAKA,EAAU,IAE1E,MADmB,GAAGG,SAAYE,OAAOD,MAAQvC,EAAOgB,I,CAc9ByB,CAAQV,GACxBW,EAA2BhD,EAAoBiD,WAAU,GACzDC,EAAiBF,EAAyBjD,cAAc,gBACzCgB,OAAOC,QAAQsB,GACvBH,SAAQgB,IACjB,MAAMC,EAAWD,EAAK,GAChBE,EAAaF,EAAK,GACED,EAAenD,cAAc,qBAAqBqD,MAC1DE,UAAYD,CAAU,IAE1BH,EAAenD,cAAc,6BACrCuD,UAAYd,EACDU,EAAenD,cAAc,gCACrCuD,UAAYf,EAEzBP,EAAeuB,YAAYP,EAAyB,IAGxDnD,EAAiB0D,YAAYvB,E,CAIjC5B,EAAW+B,SAAQqB,IACfA,EAAOC,iBAAiB,UAAUC,IAC9B,MAAMC,EAAiBzD,EAAa0D,MAC9BC,EAAiB1D,EAAayD,MACpCE,QAAQC,IAAIF,EAAgBF,GAKhCnD,EAJ0BmD,EAAgBE,EAAe,GACvD,IAONrD,EAAe,WAAYL,EAAayD","sources":["src/script/prayer.js"],"sourcesContent":["// select DOM elements\nconst prayerTimesTable = document.querySelector(\"#prayerTableBody\");\nconst prayerTimesTemplate = document.querySelector(\"#prayerTemplate\").content;\nconst regionSelect = document.querySelector(\"#userRegion\");\nconst periodSelect = document.querySelector(\"#userPeriod\");\nconst allSelects = document.querySelectorAll(\"select\");\nconst MONTHS = {\n    1: \"Yanvar\",\n    2: \"Fevral\",\n    3: \"Mart\",\n    4: \"Aprel\",\n    5: \"May\",\n    6: \"Iyun\",\n    7: \"Iyul\",\n    8: \"Avgust\",\n    9: \"Sentabr\",\n    10: \"Oktabr\",\n    11: \"Noyabr\",\n    12: \"Dekabr\"\n}\nconst DAYS = {\n    0: \"Yakshanba\",\n    1: \"Dushanba\",\n    2: \"Seshanba\",\n    3: \"Chorshanba\",\n    4: \"Payshanba\",\n    5: \"Juma\",\n    6: \"Shanba\"\n}\n\n// functions\n\n// function initializeDate(){\n//     const dateClone = new Date();\n//     const weekday = DAYS[dateClone.getDay()];\n//     const currentDate = `${dateClone.getFullYear()}-${dateClone.getMonth()}-${dateClone.getDate()}`;\n//     const currentDateToString  = getDate(currentDate);\n//     currentWeekDay.innerText = weekday;\n// }\n\nasync function makeRequest(url,params = {}){\n    const paramsToQueryString = Object.entries(params).map(param => `${param[0]}=${param[1]}`).join(\"&\");\n    return fetch(`${url}?${paramsToQueryString}`);\n}\n\nasync function getPrayerTimes(region, route) {\n    const prayerTimesData = await makeRequest(`https://islomapi.uz/api/${route}`, {\n        region: region,\n        month: new Date().getMonth() + 1\n    });\n    const prayerTimesToJSON = await prayerTimesData.json();\n    if (Array.isArray(prayerTimesToJSON)) {\n        return renderPrayerTimes(prayerTimesToJSON, prayerTimesTable);\n    }\n    renderPrayerTimes([prayerTimesToJSON], prayerTimesTable);\n    return prayerTimesToJSON;\n}\n\nfunction getDate(date) {\n    let splitDate = date;\n    if (splitDate.includes(\"T00\")) {\n        splitDate = splitDate.split(\"T\")[0];\n    }\n    if (splitDate.includes(\":\")) {\n        splitDate = splitDate.split(\",\")[0];\n    }\n    if (splitDate.includes(\"/\")) {\n        splitDate = splitDate.split(\"/\");\n    } else {\n        splitDate = splitDate.split(\"-\");\n    }\n    const [year, month, day] = [splitDate[0], Number(splitDate[1]), splitDate[2]];\n    const dateString = `${year}-yil ${Number(day)}-${MONTHS[month]}`;\n    return dateString;\n}\n\nfunction convertTimeToSeconds(hours, minutes) {\n    return (hours * 3600) + (minutes * 60);\n}\n\n\nfunction renderPrayerTimes(prayerTimes, prayerList) {\n    const prayerFragment = new DocumentFragment();\n    prayerList.innerHTML = \"\";\n    prayerTimes.forEach(prayerTime => {\n        const { region, date, times, weekday } = prayerTime;\n        const convertedDate = getDate(date);\n        const prayerTimesTemplateClone = prayerTimesTemplate.cloneNode(true);\n        const prayerTimesRow = prayerTimesTemplateClone.querySelector(\"#prayerTimes\");\n        const timesToArray = Object.entries(times);\n        timesToArray.forEach(time => {\n            const timeName = time[0];\n            const actualTime = time[1];\n            const specificTableData = prayerTimesRow.querySelector(`[data-description=${timeName}]`);\n            specificTableData.innerText = actualTime;\n        });\n        const tableDate = prayerTimesRow.querySelector(\"[data-description='date']\");\n        tableDate.innerText = convertedDate;\n        const tableWeekDay = prayerTimesRow.querySelector(\"[data-description='weekday']\");\n        tableWeekDay.innerText = weekday;\n        // append table data to the fragment\n        prayerFragment.appendChild(prayerTimesTemplateClone);\n    });\n    // append the fragment to the table\n    prayerTimesTable.appendChild(prayerFragment);\n}\n\n// event listeners\nallSelects.forEach(select => {\n    select.addEventListener(\"change\", evt => {\n        const selectedRegion = regionSelect.value;\n        const selectedPeriod = periodSelect.value;\n        console.log(selectedPeriod, selectedRegion);\n        initializePrayerTimes(selectedRegion, selectedPeriod);\n    });\n})\nfunction initializePrayerTimes(region, period) {\n    getPrayerTimes(region, period);\n}\n\n// initializeDate();\ngetPrayerTimes(\"Toshkent\", periodSelect.value);"],"names":["$ba178c9acea45a64$var$prayerTimesTable","document","querySelector","$ba178c9acea45a64$var$prayerTimesTemplate","content","$ba178c9acea45a64$var$regionSelect","$ba178c9acea45a64$var$periodSelect","$ba178c9acea45a64$var$allSelects","querySelectorAll","$ba178c9acea45a64$var$MONTHS","async","$ba178c9acea45a64$var$getPrayerTimes","region","route","prayerTimesData","url","params","paramsToQueryString","Object","entries","map","param","join","fetch","$ba178c9acea45a64$var$makeRequest","month","Date","getMonth","prayerTimesToJSON","json","Array","isArray","$ba178c9acea45a64$var$renderPrayerTimes","prayerTimes","prayerList","prayerFragment","DocumentFragment","innerHTML","forEach","prayerTime","date","times","weekday","convertedDate","splitDate","includes","split","year","day","Number","$ba178c9acea45a64$var$getDate","prayerTimesTemplateClone","cloneNode","prayerTimesRow","time","timeName","actualTime","innerText","appendChild","select","addEventListener","evt","selectedRegion","value","selectedPeriod","console","log"],"version":3,"file":"prayer.c65e4342.js.map"}